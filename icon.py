# -*- coding: utf-8 -*-

import base64
from io import BytesIO

content = """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"""

def get_fp():
    return BytesIO(base64.b64decode(content.encode("utf8")))

def save(file_name):
    with open(file_name, "wb") as fp:
        fp.write(base64.b64decode(content.encode("utf8")))
